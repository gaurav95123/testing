<?php

namespace App\Http\Controllers\Api\v1;

use Illuminate\Http\Request;
use App\Models\Message;
use App\Models\AddFriend;
use App\Models\User;
use Illuminate\Support\Facades\DB;

use Illuminate\Support\Facades\Validator;
use App\Http\Controllers\Api\v1\ResponseController;

class ChatController extends ResponseController
{
    public function userChat(Request $request)
    {
        $user = auth()->user()->id;
        $touser = $request->to_user_id;
        $data = Message::where(function ($query) use ($user, $touser) {
            $query->where("from_user_id", $user)
                ->where("to_user_id", $touser);
        })
            ->orWhere(function ($query) use ($user, $touser) {
                $query->where("from_user_id", $touser)
                    ->where("to_user_id", $user);
            })
        //    latest data with paginate pagination.
            ->latest()
            ->paginate(5);
            // ->get();
            
        return $this->responseOk(["chat message between user's {$user} and {$touser}"],["message" => $data]);
    }

    







// ==================================
    
    // public function latestmessage(Request $request){
    //     $user = auth()->user()->id;
    
    //     $friendships = AddFriend::where(function($query) use ($user){
    //             $query->where("from_user_id", $user)
    //                   ->orWhere("to_user_id", $user);
    //         })
    //         ->where("status", "Accepted")
    //         ->get();
    //         foreach($friendships as $friendship){
    //             $latestMessage=Message::where(function ($query) use ($user,$friendship){
    //                 $query->where("from_user_id",$user)
    //                 ->where("to_user_id",$friendship->to_user_id)
    //                 ->orWhere("from_user_id",$friendship->to_user_id)
    //                 ->where("to_user_id",$user);
    //             })
    //             ->latest()
    //             ->first();
    //             $friendship->latest_message=$latestMessage;
    //         }
    //         return $this->responseOk(["latest chat","data"=>$friendships]);
    //     }
// ==============================

        // $friendship=AddFriend::where(function ($query)use($user,$touser){
        //     $query->where("from_user_id",$user)
        //     ->where("to_user_id",$touser)
        //     ->where("status","Accepted");
        // })
        // ->orWhere(function ($query) use($user,$touser){
        //     $query->where("from_user_id",$touser)
        //     ->where("to_user_id",$user)
        //     ->where("status","Accepted");
        // });
        

        // $query=User::where("id", $touser)
        // ->orWhere("id",$user)
        // ->select["name"]
        // ->get();

        // $latestmsg=Message::where(function ($query) use($user,$touser){
        //     $query->where("from_user_id",$user)
        //     ->where("to_user_id",$touser);
            
        // })
        // ->orWhere(function ($query) use ($user,$touser){
        //     $query->where("from_user_id",$touser)
        //     ->where("to_user_id",$user);
        // });
        // $messages = $friendship->union($latestmsg)->latest()->get();

     
        // return $this->responseOk("Latest chat messages between users {$user} and {$touser}.", ["messages" =>  $messages]);
    
    


    public function latestmessage(Request $request){
        $user = auth()->user()->id;
    
        // $friendships = AddFriend::where(function($query) use ($user){
        //         $query->where("from_user_id", $user)
        //               ->orWhere("to_user_id", $user);
        //     })
        //     ->where("status", "Accepted")
        //     ->get();

        // $data = DB::table('messages')
        // ->select('messages.*', 'users.first_name', 'add_friends.from_user_id', 'add_friends.to_user_id')
        // ->leftJoin('add_friends as sender_friends', 'sender_friends.from_user_id', '=', 'messages.from_user_id')
        // ->leftJoin('add_friends as receiver_friends', 'receiver_friends.to_user_id', '=', 'messages.to_user_id')
        // ->leftJoin('users', 'users.id', '=', 'messages.from_user_id')
        // ->leftJoin('users AS u2', 'u2.id', '=', 'messages.to_user_id')
        // ->get();

        // =======================
        
        $data = DB::table('add_friends')
        ->select('add_friends.*', 'messages.message', 'users.first_name')
        ->leftJoin('messages', 'add_friends.from_user_id', '=', 'messages.from_user_id')
        ->leftJoin('users', 'users.id', '=', 'add_friends.to_user_id')
        ->get();
        // =============================
    


    
    

            // foreach($friendships as $friendship){
            //     $latestMessage=Message::where(function ($query) use ($user,$friendship){
            //         $query->where("from_user_id",$user)
            //         ->where("to_user_id",$friendship->to_user_id)
            //         ->orWhere("from_user_id",$friendship->to_user_id)
            //         ->where("to_user_id",$user);
            //     });
              

                // $data=User::where(function ($query)use ($user){
                //     $query->where("id",$user)
                //     ->orWhere("id",$friendship->to_user_id);
                   
                  
                // })

                // ->select(['first_name'])
                // ->latest()
                // ->paginate(5)
                // ->first();
                // $friendship->latest_message=$latestMessage;
                return $this->responseOk(["latest chat","data"=>$data]);
            }

       

    
    
    




































    
    








    public function deleteChat(Request $request, $id)
    {
        $del = Message::find($id)
            ->delete();
        return $this->responseOk(["message deleted  successfully!"]);
    }
}
