new api code.
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Auth;


class ApiController extends Controller
{
    public function createUser(Request $request)
    {
        $cost = new User;
        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'email' => 'required',
            'phone' => 'required',
            // 'image' => 'required|mimes:jpg,png,jpeg,gif',
            'password' => 'required'
        ]);
        if ($validator->fails()) {
            $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
            return response()->json($result, 400);
        }
        // $img = $request->image;
        // $ext = $img->getClientOriginalExtension();
        // $imageName = time() . '.' . $ext;
        // $img->move(public_path() . '/uploadImage/', $imageName);

        // $cost->image = $imageName;
        $cost->name = $request->name;
        $cost->email = $request->email;
        $cost->phone = $request->phone;

        $cost->password = \Hash::make($request->password);
        $cost->save();
        if ($cost->id) {
            $result = array('status' => true, 'message' => 'data updated', 'data' => $cost);

            return response()->json($result, 200);
        } else {
            $result = array('status' => false, 'message' => 'data not found');
            return response()->json($result, 400);
        }
    }



    public function getUsers()
    {
        $cost = User::get();
        $result = array('status' => true, 'message' => "user details", 'data' => $cost);
        $responseCode = 200;
        return response()->json($result, $responseCode);
    }

    public function getUserDetail($id)
    {
        $cost = User::where('id', $id)->first();
        if (!$cost) {
            $result = array('stauts' => false, 'message' => 'user not found');
            return response()->json($result, 404);
        }
        $result = array('status' => true, 'message' => 'user found', 'data' => $cost);
        return response()->json($result, 200);
    }

    public function updateUser(Request $request, $id)
    {
        $cost = User::find($id);
        if (!$cost) {
            return response()->josn(['status' => false, 'message' => 'user not found'], 404);
        }

        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'email' => 'required',
            'phone' => 'required',

        ]);

        if ($validator->fails()) {
            $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
            return response()->json($result, 400);
        }

        $cost->name = $request->name;
        $cost->email = $request->email;
        $cost->phone = $request->phone;
        $cost->save();
        $result = array('status' => true, 'message' => 'data updated successfully', 'data ' => $cost);
        return response()->json($result, 200);
    }

    public function deleteUser(Request $request, $id)
    {
        $cost = User::find($id);
        $cost->delete();
        return response()->json(['status' => true, 'message' => 'message deleted successfully']);
    }


    public function login(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required',
            'password' => 'required'
        ]);
        if ($validator->fails()) {
            $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
            return response()->json($result, 400); //bad request
        }
        $credint = $request->only('email', 'password');
        if (Auth::attempt($credint)) {
            $cost = Auth::user();

            // creating a token
            $token = $cost->createToken('MyApp')->accessToken;

            return response()->json(['status' => true, 'message' => "login successfull", "token" => $token], 200);
        }
        return response()->json(['status' => false, 'message' => "invalid login details"], 401);
    }
}
=====================================================================================================
new api route code

<?php

use App\Http\Controllers\ApiController\API;



use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ApiController;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});
Route::post('create-user', [ApiController::class, 'createUser']);
// Route::get('get-user', [ApiController::class, 'getUsers']);
Route::put('update-user/{id}', [ApiController::class, 'updateUser']);
Route::delete('delete-user/{id}', [ApiController::class, 'deleteUser']);
Route::post('login', [ApiController::class, 'login']);



// secure route within auth middleware;

Route::middleware('auth', 'api')->group(function () {

    Route::get('get-user', [ApiController::class, 'getUsers']);
    Route::get('get-user-detail/{id}', [ApiController::class, 'getUserDetail']);
});






























====================================================================================================================

laravel api controllers
<?php

namespace App\Http\Controllers\API;
use Illuminate\Support\Facades\Hash;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Custom;
use Illuminate\Support\Facades\Validator;
use Exception;
use Auth;


class UserController extends Controller

{
    
    // function to create user 

    public function createUser(Request $request ){

        $validator= Validator::make($request->all(),[
            'name'=>'required|string',
            'email'=>'required|string|unique:customs',
            'phone' => 'required|numeric|digits:10',
            'password'=>'required|min:6'

        ]);
        if($validator->fails()){
            $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
            return response()->json($result, 400); //bad request
        }

        $cost=new Custom;
        $cost->name=$request->name;
        $cost->email=$request->email;
        $cost->phone=$request->phone;
        $cost->password=\Hash::make($request->password);
        $cost->save();

        if($cost->id){
            $result=array('status'=>true,'message'=>'product created','data'=>$cost);
            $responseCode=200; //success

        }
        // this is for exception case 
        else{
            $result=array('status'=>true,'message'=>"something went wrong");
            $responseCode=400;
        }
        return response()->json($result,$responseCode); 

    //    return response()->json(['status'=>'true', 'message'=>"Hello World",'data'=>$request->all()]);
    }


    // function to return all users

    // public function getUser(){
    //     $cost=Custom::get();
    //     $result=array('status'=>true,'message'=>count($cost)." user fatched",'data'=>$cost);
    // return response()->json($result,200);

    // }

    // try catch testing

    public function getUser(){
        try{

        
        $cost=Custom::get();
        $result=array('status'=>true,'message'=>count($cost)." user fatched",'data'=>$cost);
        $responseCode=200;      
        return response()->json($result,$responseCode);
}
        catch(Exception $e){
            $result=array('status'=>false, 'message'=>"API NOT WOKING",'error'=>$e->getMessage());
            return response()->json($result,500);
}
    }


//  function to return single user details

    public function getUserDetail($id){
        $cost=Custom::where('id',$id)->first();
        if(!$cost)
        {
            return response()->json([ 'status'=>false,'message'=>'user not found'],404);
        }

        $result=array('status'=>true,'message'=>'user found','data'=>$cost);
        return response()->json($result,200);
    }

    // update user code

    public function updateUser(Request $request,$id )
    {
        $cost=Custom::find($id);

        if(!$cost){
            return response()->json(['status'=>false,'message'=>"user not found" ],404);
        }

        // validation

        $validator= Validator::make($request->all(),[
            'name'=>'required|string',
            // 'email'=>"required|string|unique:customs,email,".$id,
            
            'email' => "required|string|unique:customs,email,$id",
            'phone' => 'required|numeric|digits:10'
          

        ]);
        if($validator->fails()){
            $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
            return response()->json($result, 400); //bad request
        }
        
        // update code
        $cost->name=$request->name;
        $cost->email=$request->email;
        $cost->phone=$request->phone;
      
        $cost->save();
        $result=array('status'=>true,'message'=>'product updated successfully','data'=>$cost);
        return response()->json($result,200);

    }



        public function deleteUser($id){
            $cost=Custom::find($id);
            if(!$cost){
                return response()->json(['status'=>false,'message'=>"user not found" ],404);
            }
            $cost->delete();
                $result=array('status'=>true,'message'=>'User has been deleleted successfully');
                return response()->json($result,200);
        
        }

        // api auth functions 

        
        
        //login function
        public function login(Request $request)
        {
            $validator= Validator::make($request->all(),[
                'email'=>'required',
                'password'=>'required'
            ]);
            if($validator->fails()){
                $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
                return response()->json($result, 400); //bad request
            }
            $credint =$request->only('email','password');
            if(Auth::attempt($credint)){
                $cost = Auth::user();

                // creating a token
                $token=$cost->createToken('MyApp')->accessToken;

            return response()->json(['status'=>true,'message'=>"login successfull","token"=>$token],200);

            }
            return response()->json(['status'=>false,'message'=>"invalid login details"],401);



                

            

        }

        public function unauthenticate(Request $request)
        {
            return response()->json(['status'=>true,'message'=>"only authorised user can access","error"=>"unauthenticate"],200);

            }

            // logout function
            public function logout(){
                $cost=Auth::user();
                $cost->tokens->each(function($token,$key){
                    $token->delete();
                });

                // $cost=Auth::guard('api')->user();
                return response()->json(['status'=>true, 'message'=>'logged out successfully'],200);
            }

    }

=============================================================================================================================
       
laravel api  route
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\API\UserController;


/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();    
});

Route::post('create-user',[UserController::class,'createUser']);
// Route::get('get-user',[UserController::class,'getUser']);
// Route::get('get-user-detail/{id}',[UserController::class,'getUserDetail']);
Route::put('update-user/{id}',[UserController::class,'updateUser']);
Route::delete('delete-user/{id}',[UserController::class,'deleteUser']);


Route::post('login',[UserController::class,'login']);
// unauthenticate route
Route::get('unauthenticate',[UserController::class,'unauthenticate'])->name('unauthenticate');

// secure routes within auth middleware

Route::middleware('auth:api')->group(function(){
Route::get('logout',[UserController::class,'logout']);
Route::get('get-user',[UserController::class,'getUser']);
Route::get('get-user-detail/{id}',[UserController::class,'getUserDetail']);
});



==============================================================================================================================
new api controller

<?php

namespace App\Http\Controllers\API;
use Illuminate\Support\Facades\Hash;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Custom;
use Illuminate\Support\Facades\Validator;
use Exception;
use Auth;


class UserController extends Controller

{
    
    // function to create user 

    public function createUser(Request $request ){

        $validator= Validator::make($request->all(),[
            'name'=>'required|string',
            'email'=>'required|string|unique:customs',
            'phone' => 'required|numeric|digits:10',
            'password'=>'required|min:6'

        ]);
        if($validator->fails()){
            $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
            return response()->json($result, 400); //bad request
        }

        $cost=new Custom;
        $cost->name=$request->name;
        $cost->email=$request->email;
        $cost->phone=$request->phone;
        $cost->password=\Hash::make($request->password);
        $cost->save();

        if($cost->id){
            $result=array('status'=>true,'message'=>'product created','data'=>$cost);
            $responseCode=200; //success

        }
        // this is for exception case 
        else{
            $result=array('status'=>true,'message'=>"something went wrong");
            $responseCode=400;
        }
        return response()->json($result,$responseCode); 

        // api test
    //    return response()->json(['status'=>'true', 'message'=>"Hello World",'data'=>$request->all()]);
    }

    // ================================================================================================

    // get all user details function

    
    // function to return all users

    public function getUser(){
        $cost=Custom::get();
        $result=array('status'=>true,'message'=>count($cost)." user fatched",'data'=>$cost);
    return response()->json($result,200);

    }


    // try catch testing

//     public function getUser(){
//         try{

        
//         $cost=Custom::get();
//         $result=array('status'=>true,'message'=>count($cost)." user fatched",'data'=>$cost);
//         $responseCode=200;      
//         return response()->json($result,$responseCode);
// }
//         catch(Exception $e){
//             $result=array('status'=>false, 'message'=>"API NOT WOKING",'error'=>$e->getMessage());
//             return response()->json($result,500);
// }
//     }

// =======================================================================================================

// get user single function

//  function to return single user details

    public function getUserDetail($id){
        $cost=Custom::where('id',$id)->first();
        if(!$cost)
        {
            return response()->json([ 'status'=>false,'message'=>'user not found'],404);
        }

        $result=array('status'=>true,'message'=>'user found','data'=>$cost);
        return response()->json($result,200);
    }

    // ========================================================================================================

    // update function



    public function updateUser(Request $request,$id )
    {
        $cost=Custom::find($id);

        if(!$cost){
            return response()->json(['status'=>false,'message'=>"user not found" ],404);
        }

        // validation

        $validator= Validator::make($request->all(),[
            'name'=>'required|string',
            // 'email'=>"required|string|unique:customs,email,".$id,
            
            'email' => "required|string|unique:customs,email,$id",
            'phone' => 'required|numeric|digits:10'
          

        ]);
        if($validator->fails()){
            $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
            return response()->json($result, 400); //bad request
        }
        
        // update code
        $cost->name=$request->name;
        $cost->email=$request->email;
        $cost->phone=$request->phone;
      
        $cost->save();
        $result=array('status'=>true,'message'=>'product updated successfully','data'=>$cost);
        return response()->json($result,200);

    }
// ===========================================================================================================
// delete function

        public function deleteUser($id){
            $cost=Custom::find($id);
            if(!$cost){
                return response()->json(['status'=>false,'message'=>"user not found" ],404);
            }
            $cost->delete();
                $result=array('status'=>true,'message'=>'User has been deleleted successfully');
                return response()->json($result,200);
        
        }
// =========================================================================================================
        // api auth functions 

        
        
        //login function




        // public function login(Request $request)
        // {
        //     $validator= Validator::make($request->all(),[
        //         'email'=>'required',
        //         'password'=>'required'
        //     ]);
        //     if($validator->fails()){
        //         $result = array('status' => false, 'message' => 'validation error occured', 'error_message' => $validator->errors());
        //         return response()->json($result, 400); //bad request
        //     }
        //     $credint =$request->only('email','password');
        //     if(Auth::attempt($credint)){
        //         $cost = Auth::user();

        //         // creating a token
        //         $token=$cost->createToken('MyApp')->accessToken;

        //     return response()->json(['status'=>true,'message'=>"login successfull","token"=>$token],200);

        //     }
        //     return response()->json(['status'=>false,'message'=>"invalid login details"],401);
        // }


// new login function
        public function login(Request $request){

            $validator=Validator::make($request->all(),[

                'email'=>'required',
                'password'=>'required',
            ]);
            if($validator->fails()){
                $result=array('status'=>false,'message'=>'validation error occured','error_message'=>$validator->errors());
                return response()->json($result,400);
            }

            $credint=$request->only('email','password');


            if(   Auth::attempt($credint))  {
            $user=Auth::user();

            // createing a token
            $token=$user->createToken('myapp')->accessToken;


            return response()->json([ 'status'=>true,'message'=>'login successfull','data'=>$token],200);
}           
            return response()->json(['status'=>false,'message'=>'invalid login details' ],400);
        }

        // =================================================================================================





        public function unauthenticate(Request $request)
        {
            return response()->json(['status'=>true,'message'=>"only authorised user can access","error"=>"unauthenticate"],200);
            }
// =======================================================================================================================

            // logout function



            // public function logout(){
            //     $cost=Auth::user();
            //     $cost->tokens->each(function($token,$key){
            //         $token->delete();
            //     });

            //     // $cost=Auth::guard('api')->user();
            //     return response()->json(['status'=>true, 'message'=>'logged out successfully'],200);
            // }

            // public function logout(){
            //     $cost=Auth::user();
            //     $cost->tokens->each(function($token,$key){
            //         $token->delete();

            //     });


            //     return response()->json(['status'=>true, 'message'=>'logged out successfully'],200);

                
            // }

            public function logout(){
                $cost=Auth::user();
                $cost->tokens->each(function($token,$key){
                    $token->delete();
                });

                // $cost=Auth::guard('api')->user();
                return response()->json(['status'=>true, 'message'=>'logged out successfully'],200);
            }
            






// ===========================================================================================================
image fetch api::

    // public function listUser(){
    //     $user = auth()->user()->id;
    //     $users=User::where('id','!=',$user)
        
    //     ->select(['id','first_name','last_name','email','mobile_number','dob','gender',
    //     ])
    //     ->paginate(10);
    //     return $this->responseOk("users List",["user_data"=>$users]);

    // }
    
    public function listUser() {
        $user = auth()->user()->id;
        
        // $users = User::where('id', '!=', $user)paginate(10)->get([ 'id','first_name','last_name','image','mobile_number','dob','gender']);
        $users=User::where('id','!=',$user)
            ->select([
                'id',
                'first_name',
                'last_name',
                'email',
                'mobile_number',
                'dob',
                'gender',
               'image'
            ])
            ->paginate(20);
    
        return $this->responseOk("Users List", ["user_data" => $users]);
    }
route::
     Route::get('list-user','AuthenticationController@listUser');

    





    


    }



======================================================================================================


new api route

<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\API\UserController;


/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();    
});

Route::post('create-user',[UserController::class,'createUser']);
// Route::get('get-user',[UserController::class,'getUser']);
// Route::get('get-user-detail/{id}',[UserController::class,'getUserDetail']);
Route::put('update-user/{id}',[UserController::class,'updateUser']);
Route::delete('delete-user/{id}',[UserController::class,'deleteUser']);


Route::post('login',[UserController::class,'login']);
// unauthenticate route
Route::get('unauthenticate',[UserController::class,'unauthenticate'])->name('unauthenticate');


// secure routes within auth middleware

Route::middleware('auth:api')->group(function(){
Route::post('logout',[UserController::class,'logout']);
Route::get('get-user',[UserController::class,'getUser']);
Route::get('get-user-detail/{id}',[UserController::class,'getUserDetail']);
});

==============================================================================================================================


update data through id
    Route::post('update-like','AuthenticationController@updatelikelist');   
=================================================================================
controller function

 public function updatemusiclist(Request $request){
        $this->is_validationRule(Validation::musicList($Validation="",$message=""),$request);
        $user=Auth::guard()->user();
        $user->music_list=implode(",",$request->music_list);
        $user->save();
        return $this->responseOk('Music-List updated',["user"=>$user]);
    }
======================================================================================

validation define into validation.php file.
  // music list validation
    public static function musicList($validation=null,$message =null){
      $validation=[
        'music_list'=>'required|array',
        'list_list.*'=>"integer"
      ];
      $message=[
        'message.required'=>"please enter music list.",

      ];
      return $data=['validation'=>$validation,'message'=>$message];

    }


======================================================================================
it is define into the model

   public function getMusicListAttribute($value){
        $ids = explode(",", $value ?? "");
        $likes = Music::whereIn("id", $ids)->get();
        return $likes;
    }


===================================================================================================
public function listingvenue(){
        $user = auth()->user()->id;
        $favList = UserVenueFavorites::where("user_id", $user)->get();
        $favList = $favList->map(function($each){
            return $each->venue_id;
        });
        
        $venues = Venu::whereIn("id", $favList)->get();
        return $this->
        responseOk("Venue Listing", ['venue_listing' => $venues]);
    }




    public function listingvenue(){
        $user = auth()->user()->id;
        $favList = UserVenueFavorites::where("user_id", $user)->get();
        $favList = $favList->pluck("venue_id");
        $venues = Venu::whereIn("id", $favList)->get();
        return $this->responseOk("Venue Listing", ['venue_listing' => $venues]);
    }


    $user=Auth::guard()->user()->id;
       $users=UserVenueFavorites::where('venue_id',$request->venue_id)->where('user_id',$user)->first();
       if($users){
        $users->delete();
        return $this->responseOk('Venue removed from favorites successfully');
       }





    public function likeList(){ 
        $like=Like::get(['id','name','image']);
        $userLikeList = auth()->user()->getOriginal("like_list");
        if($userLikeList){
            $userLikeList = explode(",", $userLikeList);
            $like = $like->map(function($each) use ($userLikeList){
                if(in_array($each->id, $userLikeList)){
                    $each->isSelected = true;
                }else{
                    $each->isSelected = false;
                }
                return $each;
            });
        }
        return $this->responseOk('Like list fetched successfully.', ["like_list" => $like]);
    }
================================================================================================================
================================laravel search api================================
public function listUser(Request $request) {
    $user = auth()->user()->id;
    $search = $request->search;

    $users = User::where('id', '!=', $user)
        ->where(function ($query) use ($search) {
            $query->where('first_name', 'LIKE', '%' . $search . '%')
                ->orWhere('last_name', 'LIKE', '%' . $search . '%')
                ->orWhere('email', 'LIKE', '%' . $search . '%');

        })
        ->select([
            'id',
            'first_name',
            'last_name',
            'email',
            'mobile_number',
            'dob',
            'gender',
            'image'
        ])
        ->paginate(10);

    if ($users->count() > 0) {
        return $this->responseOk("search", ["user_name_is" => $users]);
    } else {
        return $this->responseOk('Name not found.');
    }
}





    public function userlist(Request $request)
    {
        // $users = User::get();
        $search = $request->search;
        $users = User::where(function ($query) use ($search) {

            $query->where('first_name', 'LIKE', '%' . $search . '%')
                ->orwhere('last_name', 'LIKE', '%' . $search . '%')
                ->orwhere('address', 'LIKE', '%' . $search . '%')
                ->orwhere('phone', 'LIKE', '%' . $search . '%')
                ->orwhere('designation', 'LIKE', '%' . $search . '%')

                ->orwhere('email', 'LIKE', '%' . $search . '%');
        })
            ->get();

        return response()->json(['status' => true, 'data' => $users]);
    }
api route

     Route::get('list-user','AuthenticationController@listUser');
   Route::get('user-list-search', [UserController::class, 'userlist']);

=======================================================================================================================
today code
   public function addfriendd(Request $request){
        $this->is_validationRule(Validation::adduserfriend($Validation="",$message=""),$request);  
        $user = auth()->user()->id;
        $query = AddFriend::query()
        ->where('to_user_id', $request->to_user_id)
        ->orWhere('from_user_id', $user)
        ->first();
        if($query){
            return $this->responseOk('You are already in friend list');
        }
        else{
            $list= new AddFriend();
            $list->to_user_id=$request->to_user_id;
            $list->from_user_id=$user;
            $list->status='Pending';
            $list->save();
            return $this->responseOk('Friend added successfully',["data"=>$list]);     
        }
    }

=============================================================================================================
   public function friendlist(Request $request){
            $user = auth()->user()->id;
            $users = AddFriend::where('to_user_id',$user)->where('status',$request->type)->pluck('from_user_id');
            
            $list=User::whereIn('id',$users)
            ->select(['id','first_name','last_name','image'])
            ->paginate(10); 
            return $this->responseOk('Friend_list',['friend'=>$list]);
        }

========================================================================================


public function updatestatus(Request $request){ 
        $this->is_validationRule(Validation::updateuserstatus($Validation="",$message=""),$request);  
            $user = auth()->user()->id;
            $list = AddFriend::where('from_user_id', $request->from_user_id)
            ->where('to_user_id',$user)
            ->first();
            if(!$list){
            return $this->responseOk('user not found');
            }else{
                $list->status=$request->status;
                $list->save();            
                return $this->responseOk('status updated successfully',['data'=>$list]);
            }
        }


    













    













    

