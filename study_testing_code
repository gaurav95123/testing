===================================================study code============================================================


  public function addfriend(Request $request) {
        $this->is_validationRule(Validation::adduserfriend($Validation="", $message=""), $request);  

        $user = auth()->user()->id;
        $toUserId = $request->to_user_id;

        $existingFriendship = AddFriend::where(function($query) use ($user, $toUserId) {
                $query->where('from_user_id', $user)
                    ->where('to_user_id', $toUserId);
            })
            ->orWhere(function($query) use ($user, $toUserId) {
                $query->where('from_user_id', $toUserId)
                    ->where('to_user_id', $user);
            })
            ->first();
    if($existingFriendship) {
        if($existingFriendship->to_user_id==$user){
            return $this->responseOk('User has already sent you a friend request.');
        }else{
            return $this->responseOk('Friend request already sent to user.');
        }

    } else {
       $list = new AddFriend();
       $list->to_user_id = $toUserId;
       $list->from_user_id = $user;
       $list->status = 'Pending';
       $list->save();

        return $this->responseOk('Friend request sent', ["data" =>$list]);     
     }
     
    }

route code
       Route::post('add-friend','AuthenticationController@addfriend');
=========================================================================================================================


  public function friendlist(Request $request){
            $user = auth()->user()->id;
            $users = AddFriend::where('to_user_id',$user)->where('status',$request->type)->pluck('from_user_id');
            
            $list=User::whereIn('id',$users)
            ->select(['id','first_name','last_name','image'])
            ->paginate(10); 
            return $this->responseOk('Friend_list',['friend'=>$list]);
        }
route code
     Route::post('friend-list','AuthenticationController@friendlist');
=========================================================================================================================


 public function listUser(Request $request) {
    $user = auth()->user()->id;
    // $userss=User::get(['id']);
    // $list=AddFriend::get(['to_user_id',$userss]);  
    // $lists = AddFriend::get(['from_user_id']); 
    $list = AddFriend::where("from_user_id", $user)
    ->orWhere("to_user_id",$user)
    ->get();
    $lists = $list->pluck("to_user_id");
    $detail = $list->pluck("from_user_id");
    $search = $request->search;
    $users = User::where('id', '!=', $user)
        ->whereNotIn('id', $lists)
        ->whereNotIn('id',$detail)
        ->where(function ($query) use ($search) {
            $query->where('first_name', 'LIKE', '%' . $search . '%')
                ->orWhere('last_name', 'LIKE', '%' . $search . '%')
                ->orWhere('mobile_number', 'LIKE', '%' . $search . '%')
                ->orWhere('email', 'LIKE', '%' . $search . '%');
        })
        ->select([
            'id',           
             'first_name',
            'last_name',
            'email',
            'mobile_number',
            'dob',
            'gender',
            'image'
        ])
        ->paginate(30);
        return $this->responseOk("Search", ["user_data" =>  $users]);
    }
route code
     Route::get('list-user','AuthenticationController@listUser');

====================================================================================================================

public function favVenueList(){
        $user = auth()->user()->id;
        $favList = UserVenueFavorites::where("user_id", $user)->get();
        $favList = $favList->map(function($each){
            return $each->venue_id;
        })->reverse();
        $direction = 'asc';
        if(!empty($favList->toArray())){
            $venues = Venu::whereIn("id", $favList)
            ->orderByRaw("FIELD(id, " . implode(",", $favList->toArray()) . ") $direction")
            ->get();
        }else{
            $venues = [];
        }
        return $this->responseOk("Venue Listing", ['venue_listing' => $venues]);
    }
route code
     Route::get('fav-venue-list','AuthenticationController@favVenueList');

====================================================================================================================

    public function uservanue(Request $request){

            $validator= Validator::make($request->all(),[
                'venue_id'=>'required',

            ]);
            if($validator->fails()){
                $result = array( 'message' => 'validation error occured', 'error_message' => $validator->errors());
                return response()->json($result, 400); //bad request
            }

        $user=Auth::guard()->user()->id;
       $users=UserVenueFavorites::where('venue_id',$request->venue_id)->where('user_id',$user)->first();
       if($users){
        $users->delete();
        return $this->responseOk('Venue removed from favorites successfully');
       }
        $list= new UserVenueFavorites;
        $list->user_id=$user;
        $list->venue_id	=$request->venue_id;
        $list->save();
        return $this->responseOk('Venue added to favorites successfully',["data"=>$list]);

    }

route code
     Route::post('user-venue','AuthenticationController@uservanue');

============================================================================================================================
  public function updatemusiclist(Request $request){
        $this->is_validationRule(Validation::musicList($Validation="",$message=""),$request);
        $user=Auth::guard()->user();
        $user->music_list=implode(",",$request->music_list);
        $user->save();
        return $this->responseOk('Music-List updated',["user"=>$user]);
    }

route code
    Route::post('update-music','AuthenticationController@updatemusiclist');
=============================================================================================================================

    public function updatelikelist(Request $request){

        $this->is_validationRule(Validation::likeList($Validation = "", $message = "") , $request);
        $user = Auth::guard()->user();
        $user->like_list= implode(",",$request->like_list);
        $user->save();

        return $this->responseOk('Like-List updated',["user"=>$user]);
    }
route code
    Route::post('update-like','AuthenticationController@updatelikelist');   
====================================================================================================================

public function likeMusic(){
        $like=Music::get(['id','name','image']);
        $userLikeList = auth()->user()->getOriginal("music_list");
        if($userLikeList){
            $userLikeList = explode(",", $userLikeList);
            $like = $like->map(function($each) use ($userLikeList){

                if(in_array($each->id, $userLikeList)){
                    $each->isSelected = true;
                }else{
                    $each->isSelected = false;
                }
                return $each;
            });
        }
        return $this->responseOk('Music list fetched successfully.', ["music_list" => $like]);
    }
route code
     Route::get('music-list','AuthenticationController@likeMusic');

==============================================================================================================
 public function likeList(){
        $like=Like::get(['id','name','image']);
        $userLikeList = auth()->user()->getOriginal("like_list");
        if($userLikeList){
            $userLikeList = explode(",", $userLikeList);
            $like = $like->map(function($each) use ($userLikeList){
                if(in_array($each->id, $userLikeList)){
                    $each->isSelected = true;
                }else{
                    $each->isSelected = false;
                }
                return $each;
            });
        }
        return $this->responseOk('Like list fetched successfully.', ["like_list" => $like]);
    }
route code

     Route::get('like-list','AuthenticationController@likeList');
=======================================================================================================

    public function updatestatus(Request $request){ 
            $this->is_validationRule(Validation::updateuserstatus($Validation="",$message=""),$request);  
                $user = auth()->user()->id;
                $list = AddFriend::where('from_user_id', $request->from_user_id)
                ->where('to_user_id',$user)
                ->first();
                if(!$list){
                return $this->responseOk('user not found');
                }else{
                    $list->status=$request->status;

                    if($list->status=='Rejected'){
                        $list->delete();
                        return $this->responseOk('Your request is Rejected !');
                    }
                    else{
                        $list->save();            
                    }
                    return $this->responseOk('status updated successfully',['data'=>$list]);
                }
            }


route code
     Route::post('update-status','AuthenticationController@updatestatus');

==========================================================================================================================



public function friendlist(Request $request){
            $user = auth()->user()->id;
                
                if($request->input('type') == "Pending"){
                
                    $users = AddFriend::where(function($query) use ($user, $request) {
                        $query->where('to_user_id', $user)
                              ->where('status', $request->input('type'));
                    })->get();
                }else{
                    $users = AddFriend::where(function($query) use ($user, $request) {
                        $query->where('to_user_id', $user)
                              ->where('status', $request->input('type'));
                    })
                    ->orWhere(function($query) use ($user,$request) {
                        $query->where('from_user_id', $user)
                              ->where('status',$request->input('type'));
                    })                 
                    ->get();
    
                }
                
            // merge both id's on array
            $userid=[];
            foreach($users as $userss){
                $userid[]=$userss->to_user_id;
                $userid[]=$userss->from_user_id;
            }
    
            $list=User::where('id', '!=', $user)    
            ->whereIn('id',$userid)
                ->select(['id','first_name','last_name','image'])
                ->paginate(10); 
            return $this->responseOk('Friend List.',['friend'=>$list]);
        }

route code
Route::post('friend-list','AuthenticationController@friendlist');

============================================================================================================================
search conctation using first_name and last_name

->where(function ($query) use ($search) {
            $query->where('first_name', 'LIKE', '%' . $search . '%')
                ->orWhere('last_name', 'LIKE', '%' . $search . '%')
                ->orWhereRaw("CONCAT(first_name, ' ', last_name) LIKE ?", ['%' . $search . '%']);
                // ->orWhere('mobile_number', 'LIKE', '%' . $search . '%')
                // ->orWhere('email', 'LIKE', '%' . $search . '%');
        })






===========================================================================================================================
node js.


const experss=require("express")
const con=require("./config")
const app=experss() // app instance of experss

// send data to json format using postman dynamic data
app.use(experss.json());

// get api
app.get("/",(req,res)=>{
    // res.send(" <h1>this is home page.<h1>")
   con.query("select * from users",(error,result)=>{
    if(result){
        res.send(result);

    }
    else{
        res.send(error);
    }
   })
})

//post api
// send to static data use this
app.post("/",(req,res)=>{

        const data={
            first_name:"amit",
            last_name:"bisht",
            email:"amit@gmail.com",
        }
    
        con.query('Insert INTO users SET ?',data,(error,result,fields)=>{
            if(error) throw error;
            res.send(result)
        })
    
    })

// send data from postman dynamic data
app.post("/",(req,res)=>{

    const data= req.body
    con.query('Insert INTO users SET ?',data,(error,result,fields)=>{
        if(error) throw error;
        res.send(result)
    })

})


// update api
//  dynamic update
app.put('/:id',(req,res)=>{

    const data=[req.body.first_name,req.body.last_name,req.body.email,req.params.id];
    con.query("UPDATE users SET first_name=?,last_name=?,email=? where id=?" ,data,(error,result,fields)=>{
        if(error) throw error;
        res.send(result)

    })
    // res.send("update data is working")
})


// static update
app.put('/',(req,res)=>{

    const data=["toney","bisht","toney@gmail.com",14];
    con.query("UPDATE users SET first_name=?,last_name=?,email=? where id=?" ,data,(error,result,fields)=>{
        if(error) throw error;
        res.send(result)

    })

    // res.send("update data is working")
})


// delete user dynamic
app.delete("/:id",(req,res)=>{
    con.query("DELETE FROM users WHERE id=" +req.params.id,(error,result,fields)=>{
        if(error) throw error;
        res.send(result)    
    }  
    );
    // res.send("user delete successfully")
})

// server 
app.listen('5000', console.log("server is running,"))

========================
server code
const mysql = require("mysql2");

const con = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "redhat",
  database: "testing",

});

// con.connect((error) => {
//   if (error) {
//     console.log("error", error);
//   } else {
//     console.log("connected");
//   }
// });

module.exports=con;
======================================================================================================================

public function groups(Request $request)
    {
        $data = [];
        $msg = self::$message;

        $rules = [
            'group_id' => 'required|exists:groups,group_id,deleted_at,NULL',
            'skip' => 'required',
            'limit' => 'required',
        ];

        $validator = Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return response()->json(['data' => $data, 'code' => 400, 'success' => false, 'msg' => $validator->errors()->first()]);
        }

        $sasToken = SasToken::where('id', 1)->first();
        $sas_token = $sasToken->sas_token;
        $storage_url = env('AZURE_STORAGE_URL');
        $azur_storage_url = env('AZURE_STORAGE_CONTAINER');
        $user_url = $storage_url . $azur_storage_url . '/' . config('img.user.orignal_image') . '/';
        $chat_Img_path = $storage_url . $azur_storage_url . '/' .  env('CHAT_IMAGE_PATH');
        // $experience_image = $storage_url . $azur_storage_url . '/' . config('img.experience.orignal_image') . '/';
        $noImage = asset('images/No_Image.png');

        $select = [
            "a.id",
            "a.creator_id",
            DB::raw("IF(a.image_name = null,'$noImage',CONCAT('$chat_Img_path',a.image_name,'?','$sas_token')) AS image"),
            "c.first_name as c_first_name",
            "c.last_name as c_last_name",
            DB::raw("IF(c.profile_photo = null,'$noImage',CONCAT('$user_url',c.profile_photo,'?','$sas_token')) AS c_profile_photo"),
            "a.message",
            "a.height",
            "a.width",
            "a.type",
            "a.reactions",
            'a.created_at AS cdate',
            "a.reply_id",
            // DB::raw("DATE_FORMAT(a.created_at,'%Y-%m-%d %H:%i %p') AS created_date_and_time"),
            'a.created_at AS created_date_and_time',
            'c.socket_id AS c_socket_id',
            // DB::raw("DATE_FORMAT(a.updated_at,'%Y-%m-%d %H:%i %p') AS updated_at"),
            // DB::raw("DATE_FORMAT(a.created_at,'%h:%i %p') AS cdate"),
            DB::raw("DATE_FORMAT(a.created_at,'%Y-%m-%d') AS created_at"),
            DB::raw("DATE_FORMAT(a.updated_at,'%Y-%m-%d') AS updated_at"),
            DB::raw("a.created_at AS full_created_at"),
        ];
        $query = DB::table('messages AS a')
        ->select($select)
        ->join("message_recipients as b","a.id","=","b.message_id")
        // ->join("group_users as g","g.group_user_id","=","b.recipient_group_id")
        ->join("users as c","a.creator_id","=","c.id")
        ->where("b.group_id",$request->group_id)
        ->orderBy("a.created_at",'DESC');

        $count = $query->count();
        $groups = $query->skip($request->skip)->limit($request->limit)->get();
        $mentions = DB::table('user_mentions')->select('user_mentions.id', 'user_mentions.user_id', 'user_mentions.index', 'user_mentions.username', 'user_mentions.length', 'user_mentions.type_id','users.username as new_username')->join('users', 'users.id', 'user_mentions.user_id')->where("user_mentions.type","group_message")->whereIn('user_mentions.type_id', $groups->pluck('id'))->get();
        // dd($mentions);

        $groups = $groups->map(function($eachMessage) use ($mentions,$noImage,$chat_Img_path,$user_url,$sas_token){
            $eachMessage->mentions = $mentions->where('type_id', $eachMessage->id)->values();
            $eachMessage->reactions = json_decode($eachMessage->reactions) ?? [];
            if($eachMessage->reply_id){
                $select = [
                    "a.id",
                    "a.creator_id",
                    DB::raw("IF(a.image_name = null,'$noImage',CONCAT('$chat_Img_path',a.image_name,'?','$sas_token')) AS image"),
                    "c.first_name as c_first_name",
                    "c.last_name as c_last_name",
                    DB::raw("IF(c.profile_photo = null,'$noImage',CONCAT('$user_url',c.profile_photo,'?','$sas_token')) AS c_profile_photo"),
                    "a.message",
                    "a.height",
                    "a.width",
                    "a.type",
                    "a.reactions",
                    'a.created_at AS cdate',
                    'b.group_id',
                    // DB::raw("DATE_FORMAT(a.created_at,'%Y-%m-%d %H:%i %p') AS created_date_and_time"),
                    'a.created_at AS created_date_and_time',
                    'c.socket_id AS c_socket_id',
                    // DB::raw("DATE_FORMAT(a.updated_at,'%Y-%m-%d %H:%i %p') AS updated_at"),
                    // DB::raw("DATE_FORMAT(a.created_at,'%h:%i %p') AS cdate"),
                    DB::raw("DATE_FORMAT(a.created_at,'%Y-%m-%d') AS created_at"),
                    DB::raw("DATE_FORMAT(a.updated_at,'%Y-%m-%d') AS updated_at"),
                    DB::raw("a.created_at AS full_created_at"),
                ];
                $query = DB::table('messages AS a')
                ->select($select)
                ->join("message_recipients as b","a.id","=","b.message_id")
                
                // ->join("group_users as g","g.group_user_id","=","b.recipient_group_id")
                ->join("users as c","a.creator_id","=","c.id")
                ->where("a.reply_id",$eachMessage->reply_id)
                ->orderBy("a.created_at",'DESC')
                ->first();
        
                $eachMessage->reply = $query;
                // dd($query);
               
            }
            
            return $eachMessage;
        });

        if($count > 0){
            if ($count > (int)($request->limit) + (int)($request->skip)) {
                $count = (int)($count) - ((int)($request->limit) + (int)($request->skip));
            } else {
                $count = 0;
            }

            $groups = $this->setResponse($groups, $request);
        }

        return response()->json(['data' => $groups, 'code' => 200, 'success' => true, 'msg' => $msg, 'count' => $count]);


    }

==================================================================================================================
socket.on("sendMessageToGroup", async(data) => {
        try {
            var messageId = await query.addGroupMessage(data.user_id, data.group_id, data.message, null, data.height, data.width, data.type,data.reply_id);
            if (data.mentions && data.mentions.length > 0) {
                var mentionId = await query.addMention(data.mentions, "group_message", messageId, data.recipient_group_id)
            }
            var messageData = await query.getCurrentMsg(messageId,null, "group_message", data.utc_offset);

            if(messageData.messages[0].reply_id){
                messageData.messages[0].reply = await query.getCurrentMsg(messageData.messages[0].reply_id, data.utc_offset);
                if(messageData.messages[0].reply){
                    messageData.messages[0].reply = messageData.messages[0]?.reply?.messages?.[0]
                }
            }

            var evt = "sendMessageToGroup_" + data.group_id;

            io.emit(evt, messageData);

            https.get(`${laravelAPI}/send/message/notification?schema_id=${data.group_id}&user_id=${data.user_id}&noti_message=${data.message}&type=group${data.type == "GIF" ? "&isFile=2" : ""}`, ()=>console.log("Done"))
            data.mentions.forEach(eachMention => {
                https.get(`${laravelAPI}/send/message/notification?schema_id=${data.group_id}&user_id=${data.user_id}&noti_message=${data.message}&type=group_mention&mentioned_user_id=${eachMention.user_id}`, ()=>console.log("Done"))
            });
        } catch (e) {
            console.log(e);
        }

    });
=====================================================================================================================
const addGroupMessage = async function(userId, groupId, message, image, height, width, type = "normal",reply_id) {
    const messageId = await addMessage(userId, message, image, height, width, type,reply_id);
    const groupUserId = await getGroupMemberId(userId, groupId);

    await db.query(
        connection,
        "INSERT INTO koiino.message_recipients (recipient_group_id,group_id,message_id,created_at,updated_at) VALUES ('" +
        groupUserId +
        "','" +
        groupId +
        "','" +
        messageId +
        "','" +
        moment().format("YYYY-MM-DD HH:mm:ss") +
        "','" +
        moment().format("YYYY-MM-DD HH:mm:ss") +
        "')"
    );

    return messageId;
};












    










